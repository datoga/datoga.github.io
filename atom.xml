<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David Torres</title>
  
  <subtitle>Gopher and backend developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://datoga.es/"/>
  <updated>2020-07-31T14:36:49.403Z</updated>
  <id>https://datoga.es/</id>
  
  <author>
    <name>David Torres</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Real-time web scraping, a new world to explore</title>
    <link href="https://datoga.es/12/07/2020/real-time-web-scraping/"/>
    <id>https://datoga.es/12/07/2020/real-time-web-scraping/</id>
    <published>2020-07-12T15:00:00.000Z</published>
    <updated>2020-07-31T14:36:49.403Z</updated>
    
    <content type="html"><![CDATA[<p>Web scraping is a quite old technique used to extract information from websites. You can find tons of information on the Internet about <a href="https://en.wikipedia.org/wiki/Web_scraping" target="_blank" rel="noopener">web scraping</a>.</p><p>But, are not APIs intended to do this? Well, yes, of course, but sadly APIs are not everywhere. Indeed, the most typical situation will be a website with interesting information, which is meant to be human-readable, and it lacks an API to access the information directly from your source code.</p><a id="more"></a><p>Scraping the website, you can extract the information you need, parsing the website and making it machine-readable. It allows you to interact and analyse the information of the website with your favourite framework.</p><p>There are a lot of tools to scrape websites, but they are <em>slow</em>. For example, there are a lot of <a href="https://realpython.com/beautiful-soup-web-scraper-python" target="_blank" rel="noopener">powerful libraries</a> in Python. You tipically don’t need real-time information so you usually are fine.</p><p>But, what happens if you need to extract real-time information? For example, you need to get live stock information, betting quotes, flight prices, park spaces, etc. They all have one characteristic in common: they change, and change quickly!</p><p>In all these cases you have to apply different sophisticated techniques in order to get updated information. Of course, the performance in this case is a key feature that you cannot forget.</p><p>In the next articles I will research about this problem, trying to find out:</p><ul><li><p>The time that is needed in each step when you scrape a website, identifying where are the bottlenecks.</p></li><li><p>The best framework to scrape real-time information. I will consider Python, Golang, Rust and plain curl (Bash), making comparisons between them.</p></li><li><p>The list of problems &amp; optimizations that should be done in order to avoid real-time issues.</p></li><li><p>(Bonus) A good architecture to support getting information from multiple sources. This could not be important in stock prices (the stock price is universal) but is relevant for example on betting quotes, where each betting house has different quotes on the same event.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web scraping is a quite old technique used to extract information from websites. You can find tons of information on the Internet about &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_scraping&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;web scraping&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, are not APIs intended to do this? Well, yes, of course, but sadly APIs are not everywhere. Indeed, the most typical situation will be a website with interesting information, which is meant to be human-readable, and it lacks an API to access the information directly from your source code.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="web scraping, real-time" scheme="https://datoga.es/tags/web-scraping-real-time/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://datoga.es/10/07/2020/hello-world/"/>
    <id>https://datoga.es/10/07/2020/hello-world/</id>
    <published>2020-07-10T15:00:00.000Z</published>
    <updated>2020-07-31T14:36:49.403Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog! I’m David Torres, a software engineer with strong interest on backend, architecture, design patterns, etc.</p><p>During my career (almost 14 years!) I have been coding in different languages, and using different frameworks.: Java, Spring, Spring Boot, C, C++, Python, Kotlin and then… I found Go.</p><a id="more"></a><p>Yes, I love <a href="https://play.golang.org/" target="_blank" rel="noopener">Go</a>. With the same effort that you would need in different languages you get a much more quality code (in terms of readibility and maintainability) and very efficient results, with nearly the performance you get in C/C++ or Rust.</p><p>This blog begins a journey. I have decided to focus my career to polish my code skills, revisiting the well-known principles (SOLID design, clean code, etc.) and learning the newest techniques and tools to achieve the best results in terms of quality and performance.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog! I’m David Torres, a software engineer with strong interest on backend, architecture, design patterns, etc.&lt;/p&gt;
&lt;p&gt;During my career (almost 14 years!) I have been coding in different languages, and using different frameworks.: Java, Spring, Spring Boot, C, C++, Python, Kotlin and then… I found Go.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
